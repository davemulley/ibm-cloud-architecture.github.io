{"componentChunkName":"component---src-pages-code-index-mdx","path":"/code/","result":{"pageContext":{"frontmatter":{"title":"Code"},"relativePagePath":"/code/index.mdx","titleType":"page","MdxNode":{"id":"c2a453aa-1099-5480-9d59-20811287a1e3","children":[],"parent":"581f25a7-8c75-50f8-8e06-c146a63def20","internal":{"content":"---\ntitle: Code\n---\n\n<PageDescription>\n\nIn the course of helping clients and testing new ideas for ourselves,\nthe GSE team produces a variety of tools and automation scripts\nthat might be useful to you. Most of them are housed in github \nrepos. They are provided as is. If you have problems or suggestions, \nplease raise\na github issue on the associated repo. Support will be on a best\neffort basis.\n\n</PageDescription>\n\n### **Application Modernization**\n\nApplication modernization is the journey of moving existing \napplications to a more modern cloud-native infrastructure.\n[This reference solution page](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/)\ndescribes and provides code for 3 scenarios:\n\n1. [Runtime modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/liberty/)\nmoves an application to a \"built for the cloud\" runtime with \nthe least amount of effort.\n\n2. [Spring runtime modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/spring/)\ndescribes the process of upgrading \nexisting Spring Framework and Spring Boot v1 applications \nto use Spring Boot v2.\n\n3. [Operational modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/was90/)\nis where the application is made to run in a container \nwithout any\nchange.\n\n### **Application Migration**\n\nThe [Cloud Foundry Migration Tool](https://github.com/ibm-cloud-architecture/cf-transformation)\nassists you in migrating Cloud Foundry applications to \nKubernetes based platforms, such as OpenShift, and IBM \nKubernetes Service (IKS). There is also a \n[short course](https://www.ibm.com/services/learning/) with\nvideo demos teaching how to use the tool by migrating some\nprovided sample applications. Just search on \n\"cloud foundry migration\".\n\n### **Digital Business Automation**\n\n[Denim Compute](https://github.com/ibm-cloud-architecture/denim-compute),\nA Digital Business Automation reference implementation on \nthe IBM Cloud Pak for Automation. This reference implementation \nuses the IBM Cloud Pak for Automation to exemplify how the \ndifferent capabilities of the IBM Digital Business Automation \nplatform come together on a container-centric management \nenvironment to support the execution of a complex business \nprocess.\n\n### **DevOps**\n\n[GSE DevOps Staging Page](https://github.com/ibm-cloud-architecture/gse-devops)\ncontains tutorials and configurations for implementing Tekton\nand other pipelines.\n\n### **Event Driven Architecture**\n\n[Reefer Container Shipment](https://ibm-cloud-architecture.github.io/refarch-kc/)\nreference implementation. This IBM Event Driven architecture \nreference implementation \nillustrates the deployment of real time analytics on event \nstreams in the context of container shipment in an \n[event driven architecture](https://ibm-cloud-architecture.github.io/refarch-eda/) \nwith event backbone, functions as service \nand microservices. It aims to illustrate the different event \ndriven patterns like event sourcing, CQRS and Saga and give \na lot of best practices around implementing event driven \nmicroservices.\n\n### **General**\n\n[Cloud User ID Resource Management Scripts](https://github.com/ibm-cloud-architecture/cloud-user-resource-scripts)\ncontains a set of shell scripts that, for a range of public cloud user ids,\ncan create, report on, and delete cloud services, applications and other resources\nin an automated way. These scripts could be useful for anyone who needs to \nconsistently manage cloud resources under a set of user ids, for education \ncourses or other situations.\n\n### **Code Example**\n\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: pvc[^1]\nspec:\n  accessModes: \n  - ReadWriteOnce[^2]\n  resources:\n    requests:\n      storage: 1Gi[^3]\n```\n[^1]: A unique name that represents the PersistentVolumeClaim.\n[^2]: The PersistentVolumeClaim's access mode. With `ReadWriteOnce`, \nthe volume can be mounted with read and write permissioms by a single node.\n[^3]: The size of the PersistentVolumeClaim.","type":"Mdx","contentDigest":"46aa0a73ab3b1d1e2fb85b2b0a2ee436","counter":137,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Code"},"exports":{},"rawBody":"---\ntitle: Code\n---\n\n<PageDescription>\n\nIn the course of helping clients and testing new ideas for ourselves,\nthe GSE team produces a variety of tools and automation scripts\nthat might be useful to you. Most of them are housed in github \nrepos. They are provided as is. If you have problems or suggestions, \nplease raise\na github issue on the associated repo. Support will be on a best\neffort basis.\n\n</PageDescription>\n\n### **Application Modernization**\n\nApplication modernization is the journey of moving existing \napplications to a more modern cloud-native infrastructure.\n[This reference solution page](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/)\ndescribes and provides code for 3 scenarios:\n\n1. [Runtime modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/liberty/)\nmoves an application to a \"built for the cloud\" runtime with \nthe least amount of effort.\n\n2. [Spring runtime modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/spring/)\ndescribes the process of upgrading \nexisting Spring Framework and Spring Boot v1 applications \nto use Spring Boot v2.\n\n3. [Operational modernization](https://ibm-cloud-architecture.github.io/cloudpak-for-applications/was90/)\nis where the application is made to run in a container \nwithout any\nchange.\n\n### **Application Migration**\n\nThe [Cloud Foundry Migration Tool](https://github.com/ibm-cloud-architecture/cf-transformation)\nassists you in migrating Cloud Foundry applications to \nKubernetes based platforms, such as OpenShift, and IBM \nKubernetes Service (IKS). There is also a \n[short course](https://www.ibm.com/services/learning/) with\nvideo demos teaching how to use the tool by migrating some\nprovided sample applications. Just search on \n\"cloud foundry migration\".\n\n### **Digital Business Automation**\n\n[Denim Compute](https://github.com/ibm-cloud-architecture/denim-compute),\nA Digital Business Automation reference implementation on \nthe IBM Cloud Pak for Automation. This reference implementation \nuses the IBM Cloud Pak for Automation to exemplify how the \ndifferent capabilities of the IBM Digital Business Automation \nplatform come together on a container-centric management \nenvironment to support the execution of a complex business \nprocess.\n\n### **DevOps**\n\n[GSE DevOps Staging Page](https://github.com/ibm-cloud-architecture/gse-devops)\ncontains tutorials and configurations for implementing Tekton\nand other pipelines.\n\n### **Event Driven Architecture**\n\n[Reefer Container Shipment](https://ibm-cloud-architecture.github.io/refarch-kc/)\nreference implementation. This IBM Event Driven architecture \nreference implementation \nillustrates the deployment of real time analytics on event \nstreams in the context of container shipment in an \n[event driven architecture](https://ibm-cloud-architecture.github.io/refarch-eda/) \nwith event backbone, functions as service \nand microservices. It aims to illustrate the different event \ndriven patterns like event sourcing, CQRS and Saga and give \na lot of best practices around implementing event driven \nmicroservices.\n\n### **General**\n\n[Cloud User ID Resource Management Scripts](https://github.com/ibm-cloud-architecture/cloud-user-resource-scripts)\ncontains a set of shell scripts that, for a range of public cloud user ids,\ncan create, report on, and delete cloud services, applications and other resources\nin an automated way. These scripts could be useful for anyone who needs to \nconsistently manage cloud resources under a set of user ids, for education \ncourses or other situations.\n\n### **Code Example**\n\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: pvc[^1]\nspec:\n  accessModes: \n  - ReadWriteOnce[^2]\n  resources:\n    requests:\n      storage: 1Gi[^3]\n```\n[^1]: A unique name that represents the PersistentVolumeClaim.\n[^2]: The PersistentVolumeClaim's access mode. With `ReadWriteOnce`, \nthe volume can be mounted with read and write permissioms by a single node.\n[^3]: The size of the PersistentVolumeClaim.","fileAbsolutePath":"/Users/dmulley@us.ibm.com/Documents/git/davemulley/ibm-cloud-architecture.github.io/src/pages/code/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}